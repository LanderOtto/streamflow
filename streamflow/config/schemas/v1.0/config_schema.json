{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "config_schema.json",
  "type": "object",
  "definitions": {
    "workflow": {
      "$id": "#/definitions/workflow",
      "type": "object",
      "definitions": {
        "cwl": {
          "$id": "#/definitions/workflow/definitions/cwl",
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            },
            "settings": {
              "type": "string"
            }
          },
          "required": [
            "file"
          ],
          "additionalProperties": false
        }
      },
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cwl"
          ]
        },
        "bindings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string"
              },
              "target": {
                "$id": "#/definitions/workflow/properties/bindings/",
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "resources": {
                    "type": "integer",
                    "description": "If greater than one, the STREAMFLOW_HOSTS variable contains the comma-separated list of nodes allocated for the task",
                    "default": 1
                  },
                  "service": {
                    "type": "string"
                  },
                  "workdir": {
                    "type": "string"
                  }
                },
                "required": [
                  "model",
                  "service"
                ],
                "additionalProperties": false
              }
            }
          },
          "uniqueItems": true
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "cwl"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/workflow/properties/config",
                "type": "object",
                "$ref": "#/definitions/workflow/definitions/cwl"
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "config"
      ]
    },
    "model": {
      "$id": "#/definitions/model",
      "type": "object",
      "definitions": {
        "docker-compose": {
          "$id": "#/definitions/model/definitions/docker-compose",
          "type": "object",
          "$ref": "docker-compose.json"
        },
        "helm2": {
          "$id": "#/definitions/model/definitions/helm2",
          "type": "object",
          "$ref": "helm2.json#"
        },
        "helm3": {
          "$id": "#/definitions/model/definitions/helm3",
          "type": "object",
          "$ref": "helm3.json#"
        },
        "occam": {
          "$id": "#/definitions/model/definitions/occam",
          "type": "object",
          "$ref": "occam.json#"
        }
      },
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "docker-compose",
            "helm",
            "helm2",
            "helm3",
            "occam"
          ]
        },
        "external": {
          "type": "boolean",
          "description": "If set, Streamflow does not manage the lifecycle of the execution environment. This means that all required services must be up and running when the workflow starts",
          "default": false
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "docker-compose"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/docker-compose"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "helm2"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/helm2"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "pattern": "helm(3)?"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/helm3"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "occam"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/occam"
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "config"
      ]
    }
  },
  "properties": {
    "version": {
      "type": "string"
    },
    "workflows": {
      "$id": "#/properties/workflows",
      "type": "object",
      "patternProperties": {
        "^[a-z][a-zA-Z0-9._-]*$": {
          "$ref": "#/definitions/workflow"
        }
      },
      "additionalProperties": false
    },
    "models": {
      "$id": "#/properties/models",
      "type": "object",
      "patternProperties": {
        "^[a-z][a-zA-Z0-9._-]*$": {
          "$ref": "#/definitions/model"
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "version"
  ]
}